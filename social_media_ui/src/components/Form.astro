--- 
import HandleResponse from './utils/HandleResponse.astro';
import getToken from './utils/GetToken.js';
export interface Props {
  id: string; // Form ID
  method?: string;
  linkTo: string;
  fields: Array<{ 
    id: string; 
    label: string; 
    type: string; 
    placeholder?: string; 
    options?: Array<{ label: string; value: string }>; // For dropdown/select fields
  }>; 
  submitLabel: string; // Text for submit button
  
  extraActions?: Array<{ label: string; link: string; classes?: string }>; // Optional extra links or actions
}
const { id, method = "post", linkTo, fields, submitLabel, extraActions } = Astro.props;
const hxAttribute = { [`hx-${method}`]: linkTo };
---
<!-- Loading Screen -->
<div 
  id="loadingScreen" 
  class="fixed inset-0 bg-gray-800 bg-opacity-75 flex items-center justify-center hidden">
  <div class="flex flex-col items-center">
    <div class="flex justify-center items-center">
      <div class="w-12 h-12 border-4 border-white border-t-transparent rounded-full animate-spin"></div>
    </div>
    <p class="mt-4 text-white text-lg text-center">Processing...</p>
  </div>
</div>

<script>     
    const token = localStorage.getItem("accessToken");

    // Add Authorization header to form
    document.addEventListener("DOMContentLoaded", () => {
        const form = document.querySelector('form');
        if (form) {
            const headers = {
                "Authorization": `Bearer ${token}`,
            };
            form.setAttribute('hx-headers', JSON.stringify(headers));
        }
    });
</script>

<form id={id} class="space-y-4" hx-target="#responseData"
 onsubmit="document.getElementById('loadingScreen').classList.remove('hidden'); return false;"
 {...hxAttribute} 
>
    {fields.map((field) => (
        <div>
            <label for={field.id} class="block text-sm font-medium text-gray-700">{field.label}</label>
            {field.type === "select" ? (
                <select id={field.id} name={field.id} 
                    class="w-full mt-1 px-3 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    oninput="checkFormState()">
                    {field.options?.map(option => (
                        <option value={option.value}>{option.label}</option>
                    ))}
                </select>
            ) : (
                <input 
                    type={field.type} 
                    id={field.id} 
                    name={field.id} 
                    placeholder={field.placeholder || ''} 
                    class="w-full mt-1 px-3 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    oninput="checkFormState()">
                </input>
            )}
        </div>
    ))}
    <button id="submitButton" type="submit"
        class="w-full bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded-lg "
        >
        {submitLabel}
    </button>
    {extraActions && (
        <div class="flex justify-between mt-4">
            {extraActions.map(action => (
                <a href={action.link} class={action.classes || "text-sm text-blue-600 hover:underline"}>
                    {action.label}
                </a>
            ))}
        </div>
    )}

    <!-- <script>
        // Store the initial state of the form fields
        const initialFormState = {};
    
        document.addEventListener("DOMContentLoaded", () => {
            const form = document.querySelector('form');
            const fields = form.querySelectorAll('input, select');
            
            // Initialize initial form state
            fields.forEach(field => {
                initialFormState[field.id] = normalizeValue(field.value);
    
                // Attach event listener to track changes
                field.addEventListener('input', checkFormState);
            });
    
            checkFormState(); // Initial check to ensure button state is correct
        });
    
        // Function to normalize values for comparison
        function normalizeValue(value) {
            return value.trim(); // Remove extra whitespace
        }
    
        // Function to check if form state has been modified
        function checkFormState() {
            const form = document.querySelector('form');
            const fields = form.querySelectorAll('input, select');
            let isModified = false;
    
            fields.forEach(field => {
                if (normalizeValue(field.value) !== initialFormState[field.id]) {
                    isModified = true;
                }
            });
    
            const submitButton = document.getElementById('submitButton');
            if (isModified) {
                submitButton.disabled = false;
                submitButton.classList.remove('bg-gray-400', 'cursor-not-allowed');
                submitButton.classList.add('bg-blue-600', 'hover:bg-blue-700');
            } else {
                submitButton.disabled = true;
                submitButton.classList.add('bg-gray-400', 'cursor-not-allowed');
                submitButton.classList.remove('bg-blue-600', 'hover:bg-blue-700');
            }
        }
    </script> -->
    
    <script>

        // Handle response from server
        document.addEventListener("htmx:afterRequest", function (event) {
            if (event.detail.target.id === "responseData") {
                document.getElementById('loadingScreen').classList.add('hidden');

                const response = event.detail.xhr.response; 
                const statusCode = event.detail.xhr.status
                const responseData = JSON.parse(response);
                // Send event to parent page
                const customEvent = new CustomEvent("formSuccess", { detail: { responseData, statusCode } });
                document.dispatchEvent(customEvent);
            }
        });

        document.addEventListener('htmx:beforeRequest', function(event) {
            delete event.detail.headers['HX-Target'];
        });
    </script>
    <HandleResponse />
</form>
